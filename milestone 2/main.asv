% Exercise session 4: DMT-OFDM transmission scheme

clear();
n = 3;
prefixLength = 200;
qamBlockSize = 500;
snr = inf;
inputChannel = load('IR2.mat');
channel = inputChannel.h;
channelOrder = length(channel);
fs = 16000;

% Convert BMP image to bitstream
[bitStream, imageData, colorMap, imageSize, bitsPerPixel] = imagetobitstream('image.bmp');

% QAM modulation
qamStream = qam_mod(bitStream,n);

% OFDM modulation
[ofdmStream,paddingSize] = ofdm_mod(qamStream,qamBlockSize,prefixLength);
ofdmStreamWithNoise = awgn(ofdmStream,snr,'measured');

% Channel
% Random channel ht
ht = ones(1,channelOrder);
for i=1:channelOrder
   ht(i) = rand(1); 
end
afterChannelRandom = fftfilt(ht,ofdmStreamWithNoise);

[simin,nbsecs,fs] = initparams(,fs);
sim('recplay');
out = simout.signals.values;

% OFDM demodulation
rxQamStream = ofdm_demod(afterChannelRandom,qamBlockSize,prefixLength,paddingSize,ht);

% QAM demodulation
rxBitStream = qam_demod(rxQamStream,n);
rxBitStream = transpose(rxBitStream);

% Compute BER
berTransmission = ber(bitStream,rxBitStream);

% Construct image from bitstream
imageRx = bitstreamtoimage(rxBitStream, imageSize, bitsPerPixel);

% Plot images
subplot(2,1,1); colormap(colorMap); image(imageData); axis image; title('Original image'); drawnow;
subplot(2,1,2); colormap(colorMap); image(imageRx); axis image; title(['Received image']); drawnow;
